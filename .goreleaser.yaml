# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 1

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - main: ./cmd/testmyapp
    env:
      - CGO_ENABLED=0
    goos:
      - darwin
      - windows

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

brews:
  - name: testmyapp
    description: Cli for testmyapp.io
    license: MIT
    homepage: https://github.com/gjergj/testmyapp
    folder: Formula
    repository:
      owner: Gjergj
      name: homebrew-tap
    commit_author:
      name: testmyapp-bot
      email: gjergjiramku@gmail.com

# .goreleaser.yaml
winget:
  - # Name of the recipe
    #
    # Default: ProjectName
    # Templates: allowed
    name: myproject

    # Publisher name.
    #
    # Templates: allowed
    # Required
    publisher: Foo Inc

    # Your app's description.
    #
    # Templates: allowed
    # Required
    short_description: "Software to create fast and easy drum rolls."

    # License name.
    #
    # Templates: allowed
    # Required
    license: "mit"

    # Publisher URL.
    #
    # Templates: allowed
    publisher_url: https://goreleaser.com

    # Publisher support URL.
    #
    # Templates: allowed
    publisher_support_url: "https://github.com/user/repo/issues/new"

    # Package identifier.
    #
    # Default: Publisher.ProjectName
    # Templates: allowed
    package_identifier: myproject.myproject

    # IDs of the archives to use.
    # Empty means all IDs.
    ids:
      - foo
      - bar

    # Which format to use.
    #
    # Valid options are:
    # - '':        archives or binaries
    # - 'msi':     msi installers (requires the MSI pipe configured, Pro only)
    # - 'archive': archives (only if format is zip),
    # - 'binary':  binaries
    #
    # Default: ''
    # Since: v1.24 (pro)
    use: msi

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # Product code to be used.
    #
    # Usually needed when `use: msi`.
    #
    # Since: v1.24 (pro)
    product_code: AAAA-BBB-CCC-DDD-EEEFFF

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed
    url_template: "https://github.mycompany.com/foo/bar/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Git author used to commit to the repository.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "{{ .PackageIdentifier }}: {{ .Tag }}"

    # Path for the file inside the repository.
    #
    # Default: manifests/<lowercased first char of publisher>/<publisher>/<version>
    path: manifests/g/goreleaser/1.19

    # Your app's homepage.
    homepage: "https://testmyapp.io/"

    # Your app's long description.
    #
    # Templates: allowed
    description: "Software to create fast and easy drum rolls."

    # License URL.
    #
    # Templates: allowed
    license_url: "https://goreleaser.com/license"

    # Copyright.
    #
    # Templates: allowed
    copyright: "Becker Software LTDA"

    # Copyright URL.
    #
    # Templates: allowed
    copyright_url: "https://goreleaser.com/copyright"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # package - instead, it will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed
    skip_upload: true

    # Release notes.
    #
    # If you want to use the release notes generated by GoReleaser, use
    # `{{.Changelog}}` as the value.
    #
    # Templates: allowed
    release_notes: "{{.Changelog}}"

    # Release notes URL.
    #
    # Templates: allowed
    release_notes_url: "https://foo.bar/changelog/{{.Version}}"

    # Tags.
    tags:
      - golang
      - cli

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed
      owner: caarlos0

      # Repository name.
      #
      # Templates: allowed
      name: my-repo

      # Optionally a branch can be provided.
      #
      # Default: default repository branch
      # Templates: allowed
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      # Templates: allowed
      token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # Since: v1.17
      pull_request:
        # Whether to enable it or not.
        enabled: true

        # Whether to open the PR as a draft or not.
        #
        # Since: v1.19
        draft: true

        # If the pull request template has checkboxes, enabling this will
        # check all of them.
        #
        # This feature is only available in GoReleaser Pro.
        # Since: v1.20 (pro)
        check_boxes: true

        # Base can also be another repository, in which case the owner and name
        # above will be used as HEAD, allowing cross-repository pull requests.
        #
        # Since: v1.19
        base:
          owner: goreleaser
          name: my-repo
          branch: main
